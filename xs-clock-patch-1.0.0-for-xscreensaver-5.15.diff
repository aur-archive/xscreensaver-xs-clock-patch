diff -crN xscreensaver-5.15.org/driver/XScreenSaver.ad.in xscreensaver-5.15/driver/XScreenSaver.ad.in
*** xscreensaver-5.15.org/driver/XScreenSaver.ad.in	2011-09-28 19:54:58.000000000 +0900
--- xscreensaver-5.15/driver/XScreenSaver.ad.in	2011-09-29 19:19:51.000000000 +0900
***************
*** 156,161 ****
--- 156,162 ----
  ! screen savers interactively.
  !
  *programs:								      \
+ 				anclock -root				    \n\
  				maze -root				    \n\
  @GL_KLUDGE@ GL: 				superquadrics -root			    \n\
  				attraction -root			    \n\
***************
*** 426,431 ****
--- 427,433 ----
  !
  !=============================================================================
  
+ *hacks.anclock.name:        AnClock
  *hacks.antinspect.name:     AntInspect
  *hacks.antmaze.name:        AntMaze
  *hacks.antspotlight.name:   AntSpotlight
diff -crN xscreensaver-5.15.org/driver/XScreenSaver_ad.h xscreensaver-5.15/driver/XScreenSaver_ad.h
*** xscreensaver-5.15.org/driver/XScreenSaver_ad.h	2011-09-29 13:16:35.000000000 +0900
--- xscreensaver-5.15/driver/XScreenSaver_ad.h	2011-09-29 19:23:38.000000000 +0900
***************
*** 52,57 ****
--- 52,58 ----
  "*dateFormat:		%d-%b-%y (%a); %I:%M %p",
  "*installColormap:	True",
  "*programs:								      \
+ 				anclock -root				    \\n\
  				maze -root				    \\n\
    GL: 				superquadrics -root			    \\n\
  				attraction -root			    \\n\
***************
*** 292,297 ****
--- 293,299 ----
  "*splash.body2.label:		Jamie Zawinski <jwz@jwz.org>",
  "*splash.demo.label:		Settings",
  "*splash.help.label:		Help",
+ "*hacks.anclock.name:        AnClock"
  "*hacks.antinspect.name:     AntInspect",
  "*hacks.antmaze.name:        AntMaze",
  "*hacks.antspotlight.name:   AntSpotlight",
diff -crN xscreensaver-5.15.org/hacks/Makefile.in xscreensaver-5.15/hacks/Makefile.in
*** xscreensaver-5.15.org/hacks/Makefile.in	2011-09-29 13:16:35.000000000 +0900
--- xscreensaver-5.15/hacks/Makefile.in	2011-09-29 19:34:32.000000000 +0900
***************
*** 91,97 ****
  		  maze.c moire.c noseguy.c pedal.c penrose.c pyro.c qix.c \
  		  rocks.c rorschach.c screenhack.c sierpinski.c slidescreen.c \
  		  slip.c sphere.c spiral.c strange.c swirl.c xlockmore.c \
! 		  fps.c goop.c starfish.c munch.c fadeplot.c \
  		  rd-bomb.c coral.c mountain.c triangle.c lissie.c worm.c \
  		  rotor.c ant.c xjack.c xlyap.c xscreensaver-sgigl.c \
  		  cynosure.c moire2.c flow.c epicycle.c interference.c \
--- 91,97 ----
  		  maze.c moire.c noseguy.c pedal.c penrose.c pyro.c qix.c \
  		  rocks.c rorschach.c screenhack.c sierpinski.c slidescreen.c \
  		  slip.c sphere.c spiral.c strange.c swirl.c xlockmore.c \
! 		  fps.c goop.c starfish.c munch.c fadeplot.c anclock.c \
  		  rd-bomb.c coral.c mountain.c triangle.c lissie.c worm.c \
  		  rotor.c ant.c xjack.c xlyap.c xscreensaver-sgigl.c \
  		  cynosure.c moire2.c flow.c epicycle.c interference.c \
***************
*** 130,136 ****
  		  maze.o moire.o noseguy.o pedal.o penrose.o pyro.o qix.o \
  		  rocks.o rorschach.o screenhack.o sierpinski.o slidescreen.o \
  		  slip.o sphere.o spiral.o strange.o swirl.o xlockmore.o \
! 		  fps.o goop.o starfish.o munch.o fadeplot.o \
  		  rd-bomb.o coral.o mountain.o triangle.o lissie.o worm.o \
  		  rotor.o ant.o xjack.o xlyap.o xscreensaver-sgigl.o \
  		  cynosure.o moire2.o flow.o epicycle.o interference.o \
--- 130,136 ----
  		  maze.o moire.o noseguy.o pedal.o penrose.o pyro.o qix.o \
  		  rocks.o rorschach.o screenhack.o sierpinski.o slidescreen.o \
  		  slip.o sphere.o spiral.o strange.o swirl.o xlockmore.o \
! 		  fps.o goop.o starfish.o munch.o fadeplot.o anclock.o \
  		  rd-bomb.o coral.o mountain.o triangle.o lissie.o worm.o \
  		  rotor.o ant.o xjack.o xlyap.o xscreensaver-sgigl.o \
  		  cynosure.o moire2.o flow.o epicycle.o interference.o \
***************
*** 159,165 ****
  		  maze moire noseguy pedal \
  		  penrose pyro qix rocks rorschach sierpinski slidescreen \
  		  slip strange swirl goop starfish munch \
! 		  fadeplot rd-bomb coral mountain triangle \
  		  xjack xlyap cynosure moire2 flow epicycle \
  		  interference truchet bsod crystal discrete distort kumppa \
  		  demon loop penetrate deluxe compass squiral xflame \
--- 159,165 ----
  		  maze moire noseguy pedal \
  		  penrose pyro qix rocks rorschach sierpinski slidescreen \
  		  slip strange swirl goop starfish munch \
! 		  fadeplot anclock rd-bomb coral mountain triangle \
  		  xjack xlyap cynosure moire2 flow epicycle \
  		  interference truchet bsod crystal discrete distort kumppa \
  		  demon loop penetrate deluxe compass squiral xflame \
***************
*** 198,204 ****
  	          bumps.man ccurve.man compass.man coral.man \
  	          crystal.man cynosure.man decayscreen.man \
  	          deco.man deluxe.man demon.man discrete.man distort.man \
! 	          drift.man epicycle.man euler2d.man fadeplot.man \
  	          flame.man flow.man fluidballs.man galaxy.man \
  	          goop.man grav.man greynetic.man halo.man helix.man \
  	          hopalong.man ifs.man imsmap.man \
--- 198,204 ----
  	          bumps.man ccurve.man compass.man coral.man \
  	          crystal.man cynosure.man decayscreen.man \
  	          deco.man deluxe.man demon.man discrete.man distort.man \
! 	          drift.man epicycle.man euler2d.man fadeplot.man anclock.man \
  	          flame.man flow.man fluidballs.man galaxy.man \
  	          goop.man grav.man greynetic.man halo.man helix.man \
  	          hopalong.man ifs.man imsmap.man \
***************
*** 553,558 ****
--- 553,561 ----
  # is pretty much useless in the face of more than one dependency, as far
  # as I can tell.
  #
+ anclock:	anclock.o	$(HACK_OBJS) $(COL)
+ 	$(CC_HACK) -o $@ $@.o	$(HACK_OBJS) $(COL) $(HACK_LIBS)
+ 
  attraction:	attraction.o	$(HACK_OBJS) $(COL) $(SPL)
  	$(CC_HACK) -o $@ $@.o	$(HACK_OBJS) $(COL) $(SPL) $(HACK_LIBS)
  
diff -crN xscreensaver-5.15.org/hacks/anclock.c xscreensaver-5.15/hacks/anclock.c
*** xscreensaver-5.15.org/hacks/anclock.c	1970-01-01 09:00:00.000000000 +0900
--- xscreensaver-5.15/hacks/anclock.c	2011-09-29 19:00:29.000000000 +0900
***************
*** 0 ****
--- 1,553 ----
+ /* anclock -- a simple analog clock
+  * Copyright (c) 2009 PT2K <PT2K@mymail.to>
+  *
+  * Permission to use, copy, modify, distribute, and sell this software and its
+  * documentation for any purpose is hereby granted without fee, provided that
+  * the above copyright notice appear in all copies and that both that
+  * copyright notice and this permission notice appear in supporting
+  * documentation.  No representations are made about the suitability of this
+  * software for any purpose.  It is provided "as is" without express or 
+  * implied warranty.
+  */
+ 
+ #include <stdio.h>
+ #include <stdlib.h>
+ #include <time.h>
+ #include <sys/time.h>
+ #include <math.h>
+ #include "screenhack.h"
+ 
+ 
+ typedef int               boolean;
+ typedef unsigned short    ushort;
+ typedef unsigned long     ulong;
+ typedef XWindowAttributes XGWA;
+ 
+ static const char *anclock_defaults [] = {
+   ".background:   black",
+   ".foreground:   white",
+   "*brightness:   70.0",  /* [%]  */
+   "*frequency:    5",     /* [Hz] */
+   "*grayscale:    False",
+   "*pin:          False",
+   "*size:         85.0",  /* [%]  */
+   "*wireframe:    False",
+   "*hide-index:   False",
+   "*hide-mark:    False",
+   "*hide-second:  False",
+   0
+ };
+ 
+ static XrmOptionDescRec anclock_options [] = {
+   { "-background" ,  ".background" ,  XrmoptionSepArg,  0      },
+   { "-brightness" ,  ".brightness" ,  XrmoptionSepArg,  0      },
+   { "-frequency"  ,  ".frequency"  ,  XrmoptionSepArg,  0      },
+   { "-grayscale"  ,  ".grayscale"  ,  XrmoptionNoArg ,  "True" },
+   { "-pin"        ,  ".pin"        ,  XrmoptionNoArg ,  "True" },
+   { "-size"       ,  ".size"       ,  XrmoptionSepArg,  0      },
+   { "-wireframe"  ,  ".wireframe"  ,  XrmoptionNoArg ,  "True" },
+   { "-hide-index" ,  ".hide-index" ,  XrmoptionNoArg ,  "True" },
+   { "-hide-mark"  ,  ".hide-mark"  ,  XrmoptionNoArg ,  "True" },
+   { "-hide-second",  ".hide-second",  XrmoptionNoArg ,  "True" },
+   { 0, 0, 0, 0 }
+ };
+ 
+ /* type definitions */
+ enum HAND_TYPE {htSECOND, htMINUTE, htHOUR, htMAX};
+ enum HAND_VERTEX_TYPE {hvAPEX, hvRIGHT, hvBOTTOM, hvLEFT, hvMAX};
+ 
+ /* parameter settings */
+ 
+ /* ratio definitions [%] */
+ static const double mark_outer_ratio    = 100;
+ static const double mark_inner_ratio    =  99;
+ static const double index_outer_ratio   = 100;
+ static const double index_inner_ratio   =  95;
+ static const double hand_radius_ratios[htMAX][hvMAX] = {
+   {98, 29, 30, 29}, /* Sec  */
+   {95,  3, 15,  3}, /* Min  */
+   {65,  4, 15,  4}  /* Hour */
+ };
+ static const double center_circle_ratio  =  2;
+ 
+ /* angle definitions [degree] */
+ static const double index_arc_angle = 0.6;
+ static const double hand_vertex_angles[htMAX][hvMAX] = {
+   {0, 178, 180, 182}, /* Sec  */
+   {0,  54, 180, 306}, /* Min  */
+   {0,  54, 180, 306}  /* Hour */
+ };
+ 
+ /* color range settings */
+ static ushort high_color_default = 0xF000;
+ static ushort mid_color_default  = 0xE000;
+ static ushort low_color_default  = 0xD000;
+ static ushort color_step_default = 0x0010;
+ 
+ /* function macros */
+ #define i_random(i) ((int)(((double)i)*random()/RAND_MAX))
+ #define i_round(x)  ((int)(((double)x)+0.5))
+ #define d_sin(x)    (sin(2*M_PI*(x)/360))
+ #define d_cos(x)    (cos(2*M_PI*(x)/360))
+ #define min(x,y)    (((x)<(y))?(x):(y))
+ 
+ 
+ typedef struct {
+   int x, y;
+ } XY;
+ 
+ typedef struct {
+   Display   *dpy;
+   Window     window;
+   XGWA       xgwa;
+   Pixmap     pixmap;
+   GC         bg_gc, face_gc, line_gc;
+   XColor     bg_color, fg_color;
+   int        width, height;
+   double     radius;
+   XY         center;
+   XY         orient;
+   ulong      delay; /* [usec] */
+   ushort     high_color;
+   ushort     mid_color;
+   ushort     low_color;
+   ushort     color_step;
+   ushort     diff_colors[3];
+ 
+   /* commandline options */
+   double     brightness;
+   int        frequency;
+   boolean    grayscale;
+   boolean    mono;
+   boolean    pin;
+   double     size;
+   boolean    wireframe;
+   boolean    hide_index;
+   boolean    hide_mark;
+   boolean    hide_second;
+ } state;
+ 
+ 
+ static void set_gc_color (state *st, GC gc, ushort r, ushort g, ushort b)
+ {
+   XColor color;
+ 
+   color.red   = r;
+   color.green = g;
+   color.blue  = b;
+ 
+   XAllocColor (st->dpy, st->xgwa.colormap, &color);
+   XSetForeground (st->dpy, gc, color.pixel);
+ }
+ 
+ static void set_fg_color (state *st, ushort r, ushort g, ushort b)
+ {
+   ushort fr, fg, fb, lr, lg, lb;
+ 
+   if (st->mono)
+     if (st->wireframe) {
+       fr = fg = fb = 0;
+       lr = lg = lb = 0xFFFF;
+     }
+     else {
+       fr = fg = fb = 0xFFFF;
+       lr = lg = lb = 0xFFFF;
+     }
+   else
+     if (st->wireframe) {
+       fr = st->bg_color.red; fg = st->bg_color.green; fb = st->bg_color.blue;
+       lr = r; lg = g; lb = b;
+     }
+     else {
+       fr = r; fg = g; fb = b;
+       lr = r / 2; lg = g / 2; lb = b / 2;
+     }
+ 
+   set_gc_color (st, st->face_gc, fr, fg, fb);
+   set_gc_color (st, st->line_gc, lr, lg, lb);
+ 
+   if (st->wireframe) {
+     fr = lr; fg = lg; fb = lb;
+   }
+   st->fg_color.red   = fr;
+   st->fg_color.green = fg;
+   st->fg_color.blue  = fb;
+ }
+ 
+ static void change_color (state *st)
+ {
+   ushort temp_colors[3], buff;
+   int    color_orient;
+   int    i, j;
+ 
+   if (st->mid_color == st->fg_color.red) {
+     color_orient = i_random (2) * 2 - 1;
+     for (i = 0; i < 3; i++)
+       st->diff_colors[i] = st->color_step * color_orient;
+     st->diff_colors[i_random (3)] = -2 * st->color_step * color_orient;
+   }
+ 
+   temp_colors[0] = st->fg_color.red;
+   temp_colors[1] = st->fg_color.green;
+   temp_colors[2] = st->fg_color.blue;
+   for (i = 0; i < 3; i++) {
+     buff = temp_colors[i] + st->diff_colors[i];
+     if ((buff < st->low_color) || (st->high_color < buff)) {
+       for (j = 0; j < 3; j++)
+         st->diff_colors[j] = -st->diff_colors[j];
+       break;
+     }
+   }
+ 
+   for (i = 0; i < 3; i++)
+     temp_colors[i] += st->diff_colors[i];
+ 
+   set_fg_color (st, temp_colors[0], temp_colors[1], temp_colors[2]);
+ }
+ 
+ static void draw_marks (state *st)
+ {
+   int    min;
+   double outer_radius, inner_radius;
+   double theta;
+   double sin_theta, cos_theta;
+   int    x1, y1, x2, y2;
+ 
+   outer_radius = st->radius * mark_outer_ratio / 100;
+   inner_radius = st->radius * mark_inner_ratio / 100;
+ 
+   for (min = 0; min < 60; min++) {
+     theta = min * 6;
+     sin_theta = d_sin (theta);
+     cos_theta = d_cos (theta);
+     x1 = i_round (st->center.x + outer_radius * sin_theta);
+     y1 = i_round (st->center.y - outer_radius * cos_theta);
+     x2 = i_round (st->center.x + inner_radius * sin_theta);
+     y2 = i_round (st->center.y - inner_radius * cos_theta);
+ 
+     XDrawLine (st->dpy, st->pixmap, st->wireframe ? st->line_gc : st->face_gc,
+                x1, y1, x2, y2);
+   }
+ }
+ 
+ static void draw_indexes (state *st)
+ {
+   int      min, i;
+   double   radii[4];
+   double   theta;
+   double   vertex_angles[4];
+   XPoint   index_vertexes[5];
+ 
+   radii[0] = radii[3] = st->radius * index_outer_ratio / 100;
+   radii[1] = radii[2] = st->radius * index_inner_ratio / 100;
+   vertex_angles[0] = vertex_angles[1] =  index_arc_angle;
+   vertex_angles[2] = vertex_angles[3] = -index_arc_angle;
+ 
+   for (min = 0; min < 60; min += 5) {
+     theta = min * 6;
+     for (i = 0; i < 4; i++) {
+       index_vertexes[i].x =
+         i_round (st->center.x + radii[i] * d_sin (theta + vertex_angles[i]));
+       index_vertexes[i].y =
+         i_round (st->center.y - radii[i] * d_cos (theta + vertex_angles[i]));
+     }
+     index_vertexes[4].x = index_vertexes[0].x;
+     index_vertexes[4].y = index_vertexes[0].y;
+ 
+     XFillPolygon (st->dpy, st->pixmap, st->face_gc,
+                   index_vertexes, 5, Convex, CoordModeOrigin);
+     XDrawLines (st->dpy, st->pixmap, st->line_gc,
+                 index_vertexes, 5, CoordModeOrigin);
+   }
+ }
+ 
+ static void draw_hand (state *st,enum HAND_TYPE ht, double theta)
+ /* theta [degree] */
+ {
+   enum HAND_VERTEX_TYPE hv;
+   double   hand_radius;
+   XPoint   hand_vertexes[hvMAX + 1];
+ 
+   for (hv = 0; hv < hvMAX; hv++) {
+     hand_radius = st->radius * hand_radius_ratios[ht][hv] / 100;
+     hand_vertexes[hv].x =
+       i_round (st->center.x +
+                hand_radius *
+                d_sin (theta + hand_vertex_angles[ht][hv]));
+     hand_vertexes[hv].y =
+       i_round (st->center.y -
+                hand_radius *
+                d_cos (theta + hand_vertex_angles[ht][hv]));
+   }
+   hand_vertexes[hvMAX].x = hand_vertexes[0].x;
+   hand_vertexes[hvMAX].y = hand_vertexes[0].y;
+ 
+   XFillPolygon (st->dpy, st->pixmap, st->face_gc,
+                 hand_vertexes, hvMAX + 1, Convex, CoordModeOrigin);
+   XDrawLines (st->dpy, st->pixmap, st->line_gc,
+               hand_vertexes, hvMAX + 1, CoordModeOrigin);
+ }
+ 
+ static void draw_center_circle (state *st)
+ {
+   static const int twi_pi = 360 * 64;
+   double circle_radius;
+   int    x, y, w, h;
+ 
+   circle_radius = st->radius * center_circle_ratio / 100;
+   x = i_round (st->center.x - circle_radius);
+   y = i_round (st->center.y - circle_radius);
+   w = h = i_round (circle_radius * 2);
+ 
+   XFillArc (st->dpy, st->pixmap, st->face_gc, x, y, w, h, 0, twi_pi);
+   XDrawArc (st->dpy, st->pixmap, st->line_gc, x, y, w, h, 0, twi_pi);
+ }
+ 
+ static void draw_clock_pixmap (state *st)
+ {
+   struct timeval  tv;
+   struct tm      *now;
+   suseconds_t     msec;
+   double          numerator, denominator;
+   double          theta[htMAX];
+ 
+   gettimeofday (&tv, NULL);
+   now = localtime (&tv.tv_sec);
+   msec = tv.tv_usec / st->delay * st->delay / 1000;
+ 
+   numerator       = 1000 * now->tm_sec + msec;
+   denominator     = 60 * 1000;
+   theta[htSECOND] = 360 * numerator / denominator;
+   numerator       = 60 * 1000 * now->tm_min + numerator;
+   denominator     = 60 * denominator;
+   theta[htMINUTE] = 360 * numerator / denominator;
+   numerator       = 60 * 60 * 1000 * (now->tm_hour % 12) + numerator;
+   denominator     = 12 * denominator;
+   theta[htHOUR]   = 360 * numerator / denominator;
+ 
+   XFillRectangle (st->dpy, st->pixmap, st->bg_gc, 0, 0, st->width, st->height);
+ 
+   if (!st->hide_mark)
+     draw_marks (st);
+   if (!st->hide_index)
+     draw_indexes (st);
+   draw_hand (st, htHOUR, theta[htHOUR]);
+   draw_hand (st, htMINUTE, theta[htMINUTE]);
+   if (!st->hide_second)
+     draw_hand (st, htSECOND, theta[htSECOND]);
+   draw_center_circle (st);
+ }
+ 
+ static void move_clock (state *st)
+ {
+   if (st->center.x - st->radius <= 0)
+     st->orient.x =  1;
+   if (st->width <= st->center.x + st->radius)
+     st->orient.x = -1;
+   if (st->center.y - st->radius <= 0)
+     st->orient.y =  1;
+   if (st->height <= st->center.y + st->radius)
+     st->orient.y = -1;
+   st->center.x += st->orient.x;
+   st->center.y += st->orient.y;
+ }
+ 
+ static void create_pixmap (state *st)
+ {
+   if (st->pixmap)
+     XFreePixmap (st->dpy, st->pixmap);
+   st->pixmap = XCreatePixmap (st->dpy, st->window, st->width, st->height,
+                               st->xgwa.depth);
+ }
+ 
+ static void option_warning (char *opt, char *val, char *msg, char *newval)
+ {
+   fprintf (stderr, "Warning: %s %s is %s: using %s.\n",
+            opt, val, msg, newval);
+ }
+ 
+ static void correct_options (state *st)
+ {
+   char    val[256], newval[256];
+   char   *range_msg      = "out of range";
+   char   *odd_msg        = "odd";
+   char   *opt_brightness = "brightness";
+   char   *opt_frequency  = "frequency";
+   char   *opt_size       = "size";
+   char   *fmt_brightness = "%.1f";
+   char   *fmt_frequency  = "%d";
+   char   *fmt_size       = "%.1f";
+   double  min_brightness =  10.0;
+   double  max_brightness = 100.0;
+   int     min_frequency  =   1;
+   int     max_frequency  =  10;
+   double  min_size       =  10.0;
+   double  max_size       =  99.0;
+ 
+   sprintf (val, fmt_brightness, st->brightness);
+   if (st->brightness < min_brightness) {
+     sprintf (newval, fmt_brightness, min_brightness);
+     option_warning (opt_brightness, val, range_msg, newval);
+     st->brightness = min_brightness;
+   }
+   if (max_brightness < st->brightness) {
+     sprintf (newval, fmt_brightness, max_brightness);
+     option_warning (opt_brightness, val, range_msg, newval);
+     st->brightness = max_brightness;
+   }
+ 
+   sprintf (val, fmt_frequency, st->frequency);
+   if (st->frequency < min_frequency) {
+     sprintf (newval, fmt_frequency, min_frequency);
+     option_warning (opt_frequency, val, range_msg, newval);
+     st->frequency = min_frequency;
+   }
+   if (max_frequency < st->frequency) {
+     sprintf (newval, fmt_frequency, max_frequency);
+     option_warning (opt_frequency, val, range_msg, newval);
+     st->frequency = max_frequency;
+   }
+   if (0 != 1000 % st->frequency) {
+     sprintf (newval, fmt_frequency, 5);
+     option_warning (opt_frequency, val, odd_msg, newval);
+     st->frequency = 5;
+   }
+ 
+   sprintf (val, fmt_size, st->size);
+   if (st->size < min_size) {
+     sprintf (newval, fmt_size, min_size);
+     option_warning (opt_size, val, range_msg, newval);
+     st->size = min_size;
+   }
+   if (max_size < st->size) {
+     sprintf (newval, fmt_size, max_size);
+     option_warning (opt_size, val, range_msg, newval);
+     st->size = max_size;
+   }
+ }
+ 
+ static void *anclock_init (Display *dpy, Window window)
+ {
+   state *st = (state *) calloc (1, sizeof (*st));
+   ulong pixel;
+ 
+   st->dpy = dpy;
+   st->window = window;
+   XGetWindowAttributes (st->dpy, st->window, &st->xgwa);
+   st->width  = st->xgwa.width;
+   st->height = st->xgwa.height;
+ 
+   st->brightness  = get_float_resource   (dpy, "brightness" , "Float"  );
+   st->frequency   = get_integer_resource (dpy, "frequency"  , "Integer");
+   st->grayscale   = get_boolean_resource (dpy, "grayscale"  , "Boolean");
+   st->mono        = get_boolean_resource (dpy, "mono"       , "Boolean");
+   st->pin         = get_boolean_resource (dpy, "pin"        , "Boolean");
+   st->size        = get_float_resource   (dpy, "size"       , "Float"  );
+   st->wireframe   = get_boolean_resource (dpy, "wireframe"  , "Boolean");
+   st->hide_index  = get_boolean_resource (dpy, "hide-index" , "Boolean");
+   st->hide_mark   = get_boolean_resource (dpy, "hide-mark"  , "Boolean");
+   st->hide_second = get_boolean_resource (dpy, "hide-second", "Boolean");
+   correct_options (st);
+   st->delay = 1000000 / st->frequency;
+ 
+   st->high_color = i_round (high_color_default * st->brightness / 100);
+   st->mid_color  = i_round (mid_color_default  * st->brightness / 100);
+   st->low_color  = i_round (low_color_default  * st->brightness / 100);
+   st->color_step = i_round (color_step_default * st->brightness / 100);
+ 
+   st->bg_gc   = XCreateGC (dpy, window, 0, NULL);
+   st->face_gc = XCreateGC (dpy, window, 0, NULL);
+   st->line_gc = XCreateGC (dpy, window, 0, NULL);
+ 
+   if (st->mono)
+     pixel = BlackPixel (dpy, 0);
+   else
+     pixel = get_pixel_resource (dpy, st->xgwa.colormap,
+                                 "background", "Background");
+   st->bg_color.pixel = pixel;
+   XQueryColor (dpy, st->xgwa.colormap, &st->bg_color);
+   set_gc_color (st, st->bg_gc,
+                 st->bg_color.red, st->bg_color.green, st->bg_color.blue);
+   set_fg_color (st, st->mid_color, st->mid_color, st->mid_color);
+ 
+   st->radius = min (st->width, st->height) / 2.0 * st->size / 100;
+   if (st->pin) {
+     st->center.x = i_round (st->width  / 2.0);
+     st->center.y = i_round (st->height / 2.0);
+   }
+   else {
+     st->center.x = i_round (st->radius) +
+       i_random (i_round (st->width  - st->radius * 2));
+     st->center.y = i_round (st->radius) +
+       i_random (i_round (st->height - st->radius * 2));
+   }
+   st->orient.x = i_random (2) * 2 - 1;
+   st->orient.y = i_random (2) * 2 - 1;
+ 
+   create_pixmap (st);
+ 
+   return st;
+ }
+ 
+ static void anclock_reshape (Display *dpy, Window window, void *closure,
+                              unsigned int w, unsigned int h)
+ {
+   state *st = (state *) closure;
+ 
+   XGetWindowAttributes (st->dpy, st->window, &st->xgwa);
+   st->width  = st->xgwa.width;
+   st->height = st->xgwa.height;
+   st->radius = min (st->width, st->height) / 2.0 * st->size / 100;
+ 
+   if (st->pin) {
+     st->center.x = i_round (st->width  / 2.0);
+     st->center.y = i_round (st->height / 2.0);
+   }
+   else {
+     if (st->center.x - st->radius < 0)
+       st->center.x = i_round (st->radius);
+     if (st->width < st->center.x + st->radius)
+       st->center.x = st->width - i_round (st->radius);
+     if (st->center.y - st->radius < 0)
+       st->center.y = i_round (st->radius);
+     if (st->height < st->center.y + st->radius)
+       st->center.y = st->height - i_round (st->radius);
+   }
+ 
+   create_pixmap (st);
+ }
+ 
+ static Bool anclock_event (Display *dpy, Window window, void *closure,
+                            XEvent *event)
+ {
+   return False;
+ }
+ 
+ static ulong anclock_draw (Display *dpy, Window window, void *closure)
+ {
+   state *st = (state *) closure;
+   struct timeval tv;
+ 
+   if (!st->pin)
+     move_clock (st);
+   if (!st->grayscale && !st->mono)
+     change_color (st);
+   draw_clock_pixmap (st);
+   XCopyArea (st->dpy, st->pixmap, st->window, st->bg_gc,
+              0, 0, st->width, st->height, 0, 0);
+   gettimeofday (&tv, NULL);
+   return (st->delay - tv.tv_usec % st->delay);
+ }
+ 
+ static void anclock_free (Display *dpy, Window window, void *closure)
+ {
+   state *st = (state *) closure;
+ 
+   XFreePixmap (st->dpy, st->pixmap);
+   XFreeGC (st->dpy, st->bg_gc);
+   XFreeGC (st->dpy, st->face_gc);
+   XFreeGC (st->dpy, st->line_gc);
+   free (st);
+ }
+ 
+ XSCREENSAVER_MODULE ("AnClock", anclock)
diff -crN xscreensaver-5.15.org/hacks/anclock.man xscreensaver-5.15/hacks/anclock.man
*** xscreensaver-5.15.org/hacks/anclock.man	1970-01-01 09:00:00.000000000 +0900
--- xscreensaver-5.15/hacks/anclock.man	2011-09-29 19:01:05.000000000 +0900
***************
*** 0 ****
--- 1,123 ----
+ .TH XScreenSaver 1 "20-Mar-2009" "X Version 11"
+ .SH NAME
+ anclock - a simple analog clock
+ .SH SYNOPSIS
+ .B anclock
+ [\-root]
+ [\-window]
+ [\-mono]
+ [\-install]
+ [\-noinstall]
+ [\-visual \fIvisual\fP]
+ [\-window-id \fIid\fP]
+ [\-fps]
+ [\-no-fps]
+ [\-pair]
+ [\-background \fIspec\fP]
+ [\-brightness \fIfrac\fP]
+ [\-foreground \fIspec\fP]
+ [\-frequency \fIint\fP]
+ [\-grayscale]
+ [\-pin]
+ [\-size \fIpercent\fP]
+ [\-wireframe]
+ [\-hide-index]
+ [\-hide-mark]
+ [\-hide-second]
+ .SH DESCRIPTION
+ The \fIanclock\fP program draws a simple analog clock.
+ .SH OPTIONS
+ .I anclock
+ accepts the following options:
+ .TP 8
+ .B \-root
+ Draw on the root window.
+ .TP 8
+ .B \-window
+ Draw on a newly-created window.  This is the default.
+ .TP 8
+ .B \-mono
+ Monochrome clock (2-bit).
+ .TP 8
+ .B \-install
+ Install a private colormap for the window.  Currently, it doesn't work.
+ .TP 8
+ .B \-noinstall
+ Don't install a private colormap for the window.
+ .TP 8
+ .B \-visual \fIvisual\fP
+ Specify which visual to use.  Legal values are the name of a visual class,
+ or the id number (decimal or hex) of a specific visual.
+ .TP 8
+ .B \-window-id \fIid\fP
+ Draw to the indicated window instead; this only works if the
+ .BR xscreensaver-getimage (1)
+ program is installed.
+ .TP 8
+ .B \-fps
+ Display the current frame rate and CPU load.
+ .TP 8
+ .B \-no-fps
+ Don't display fps.  This is the default.
+ .TP 8
+ .B \-pair
+ Create a pair of windows.
+ .TP 8
+ .B \-background(-bg) \fIspec\fP
+ What to use for the background.  This may be a color name,
+ a hexadecimal RGB specification in the form '#rrggbb',
+ or the name of a PPM file.  Default black.
+ .TP 8
+ .B \-brightness \fIfrac\fP
+ Relative brightness ratio [%].  Default 70.
+ .TP 8
+ .B \-foreground(-fg) \fIspec\fP
+ What to use for the fps font color.  This may be a color name,
+ a hexadecimal RGB specification in the form '#rrggbb',
+ or the name of a PPM file.  Default white.
+ .TP 8
+ .B \-frequency \fIint\fP
+ Vibration frequency [Hz].  Legal values are 1, 2, 4, 5, 8 or 10.  Default 5.
+ .TP 8
+ .B \-grayscale
+ Grayscale clock (no color changing).
+ .TP 8
+ .B \-pin
+ Fix clock on the center of the screen.
+ .TP 8
+ .B \-size \fIfrac\fP
+ Clock size ratio [%].  Default 85.
+ .TP 8
+ .B \-wireframe
+ Wireframe clock.
+ .TP 8
+ .B \-hide-index
+ Don't show the indexes.
+ .TP 8
+ .B \-hide-mark
+ Don't show the second marks.
+ .TP 8
+ .B \-hide-second
+ Don't show the second hand.
+ .SH ENVIRONMENT
+ .PP
+ .TP 8
+ .B DISPLAY
+ to get the default host and display number.
+ .TP 8
+ .B XENVIRONMENT
+ to get the name of a resource file that overrides the global resources
+ stored in the RESOURCE_MANAGER property.
+ .SH SEE ALSO
+ .BR X (1),
+ .BR xscreensaver (1)
+ .SH COPYRIGHT
+ Copyright \(co 2009 by PT2K.  Permission to use, copy, modify, 
+ distribute, and sell this software and its documentation for any purpose is 
+ hereby granted without fee, provided that the above copyright notice appear 
+ in all copies and that both that copyright notice and this permission notice
+ appear in supporting documentation.  No representations are made about the 
+ suitability of this software for any purpose.  It is provided "as is" without
+ express or implied warranty.
+ .SH AUTHOR
+ PT2K <PT2K@mymail.to>, 20-Mar-2009.
diff -crN xscreensaver-5.15.org/hacks/config/anclock.xml xscreensaver-5.15/hacks/config/anclock.xml
*** xscreensaver-5.15.org/hacks/config/anclock.xml	1970-01-01 09:00:00.000000000 +0900
--- xscreensaver-5.15/hacks/config/anclock.xml	2011-09-29 19:01:55.000000000 +0900
***************
*** 0 ****
--- 1,49 ----
+ <?xml version="1.0" encoding="ISO-8859-1"?>
+ 
+ <screensaver name="anclock" _label="AnClock">
+ 
+   <command arg="-root"/>
+ 
+   <select id="frequency">
+     <option id="1"  _label="Frequency:  1 [Hz]" arg-set="-frequency 1" />
+     <option id="2"  _label="Frequency:  2 [Hz]" arg-set="-frequency 2" />
+     <option id="4"  _label="Frequency:  4 [Hz]" arg-set="-frequency 4" />
+     <option id="5"  _label="Frequency:  5 [Hz]"                        />
+     <option id="8"  _label="Frequency:  8 [Hz]" arg-set="-frequency 8" />
+     <option id="10" _label="Frequency: 10 [Hz]" arg-set="-frequency 10"/>
+   </select>
+ 
+   <number id="brightness" type="slider" arg="-brightness %"
+           _label="Brightness" _low-label="Low" _high-label="High"
+           low="10" high="100" default="70"/>
+ 
+   <number id="size" type="slider" arg="-size %"
+           _label="Size" _low-label="Small" _high-label="Large"
+           low="10" high="99" default="85"/>
+ 
+   <hgroup>
+     <boolean id="grayscale" _label="Gray scale" arg-set="-grayscale"/>
+     <boolean id="mono"      _label="Monochrome" arg-set="-mono"     />
+     <boolean id="wireframe" _label="Wireframe"  arg-set="-wireframe"/>
+   </hgroup>
+ 
+   <hgroup>
+     <boolean id="pin" _label="Fix clock" arg-set="-pin"/>
+   </hgroup>
+ 
+   <hgroup>
+     <boolean id="hide-index"  _label="Hide indexes"     arg-set="-hide-index" />
+     <boolean id="hide-mark"   _label="Hide marks"       arg-set="-hide-mark"  />
+     <boolean id="hide-second" _label="Hide second hand" arg-set="-hide-second"/>
+   </hgroup>
+ 
+   <hgroup>
+     <boolean id="showfps" _label="Show frame rate" arg-set="-fps"/>
+   </hgroup>
+ 
+   <_description>
+ A simple analog clock.
+ 
+ Written by PT2K; 2009.
+   </_description>
+ </screensaver>
